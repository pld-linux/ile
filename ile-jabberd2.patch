diff -ruN ile-0.4.old/ChangeLog ile-0.4/ChangeLog
--- ile-0.4.old/ChangeLog	2005-02-10 20:17:05.431743368 +0100
+++ ile-0.4/ChangeLog	2005-02-10 22:56:23.793651488 +0100
@@ -1,3 +1,7 @@
+2005-02-10 20:10  kg (Mariusz Jakubowski)
+
+	* ile.pl: jabberd2 support
+
 2003-08-01 19:07  peralta
 
 	* ile.pl: version bump
diff -ruN ile-0.4.old/ile.pl ile-0.4/ile.pl
--- ile-0.4.old/ile.pl	2005-02-10 20:17:05.431743368 +0100
+++ ile-0.4/ile.pl	2005-02-10 23:09:41.109441064 +0100
@@ -43,7 +43,7 @@
 ##### Init
 sub load_config {
 	print " - config\n";
-	$config = XMLin("ile.xml");
+	$config = XMLin("/etc/jabber/ile.xml");
 }
 
 # jsconnect - Sets up callbacks and connects to the jabber server
@@ -56,11 +56,12 @@
 	$con->Info(	name	=>	"ILE",
 			version	=>	VERSION);
 
-	$con->SetCallBacks(	onconnect	=> 	\&send_probes);
+	$con->SetCallBacks(	onauth	=> 	\&send_probes);
 
-	$con->SetPresenceCallBacks(	available 	=>	\&presence_avail,
-					unavailable	=>	\&presence_unavail,
-				   );
+	$con->SetPresenceCallBacks(	
+            available 	=>	\&presence_avail,
+            unavailable	=>	\&presence_unavail,
+	);
 
 	$con->DefineNamespace(	xmlns	=>	'vcard-temp',
 				type	=>	'Query',
@@ -100,15 +101,24 @@
 						],
 			     );
 
-	$con->SetIQCallBacks(	"vcard-temp"	=>	{ get	=> \&vcard_get_cb, },
-				"jabber:iq:register" =>	{
-								get=>\&iqRegisterGetCB,
-								set=>\&iqRegisterSetCB,
-                                                 	},
-				"jabber:iq:browse"   =>	{
-								get=>\&iqBrowseGetCB,
-							},
-			    );
+	$con->SetIQCallBacks(	
+        "vcard-temp"	=>	{
+            get	=> \&vcard_get_cb,
+        },
+        "jabber:iq:register" =>	{
+            get=>\&iqRegisterGetCB,
+            set=>\&iqRegisterSetCB,
+        },
+        "jabber:iq:browse"   =>	{
+            get=>\&iqBrowseGetCB,
+        },
+        "http://jabber.org/protocol/disco#info"     =>  {
+            get => \&iqDiscoInfoGetCB,
+        },
+        "http://jabber.org/protocol/disco#items"    =>  {
+            get => \&iqDiscoItemsGetCB,
+        },
+    );
 
 
 	$con->Execute(	hostname	=>	$config->{'jabber'}->{'server'},
@@ -222,7 +232,8 @@
 	my $iqReplyQuery = $iqReply->NewQuery("jabber:iq:register");
 
 	# <remove/> ?
-	if ($query->DefinedRemove()) {
+    #if ($query->DefinedRemove()) {
+    if ($query->GetXML() =~ /<remove/io) {
 		delete($users{$fromJID});
 		delete($passwords{$fromJID});
 		delete($hosts{$fromJID});
@@ -301,7 +312,9 @@
 
 		# N::J intelligent presence DB
 		$con->PresenceDBParse($presence);
-		$reply = $presence->Reply(type=>'available', status=>'OK');
+		$reply = $presence->Reply(status=>'OK');
+        $reply->RemoveType();
+        $reply->SetFrom($reply->GetFrom().'/ILE') unless $reply->GetFrom() =~ /\//;
 	}
 
 	$con->Send($reply);
@@ -454,6 +467,52 @@
 
 ##### Helper funcs
 
+sub iqDiscoInfoGetCB
+{
+    my $sid = shift;
+    my $iq = shift;
+
+    my $to = $iq->GetTo();
+    my $from = $iq->GetFrom();
+    my $service = $config->{jabber}->{localname};
+
+    # tworzymy iq z odpowiedzia
+    my $iqReply = $iq->Reply(type=>'result');
+    # tworzymy nowe query o zadanym ns
+    my $iqReplyQuery = $iqReply->NewQuery('http://jabber.org/protocol/disco#info');
+    
+    # chwalimy sie obslugiwanymi "ficzerami"
+    $iqReplyQuery->AddFeature(var=>'http://jabber.org/protocol/disco#info');
+    $iqReplyQuery->AddFeature(var=>'http://jabber.org/protocol/disco#items');
+    $iqReplyQuery->AddFeature(var=>'jabber:iq:time');
+    $iqReplyQuery->AddFeature(var=>'jabber:iq:version');
+    $iqReplyQuery->AddFeature(var=>'jabber:iq:last');
+    $iqReplyQuery->AddFeature(var=>'jabber:iq:browse');
+    $iqReplyQuery->AddFeature(var=>'jabber:iq:register');
+    $iqReplyQuery->AddFeature(var=>'vcard-temp');
+
+    # ustawiamy "tozsamosc" :)
+    $iqReplyQuery->AddIdentity(
+        category    => 'headline',
+        type        => 'notice',
+        name        => 'ILE',
+    );
+
+    $con->Send($iqReply);
+}
+
+sub iqDiscoItemsGetCB
+{
+    my $sid = shift;
+    my $iq = shift;
+
+    my $iqReply = $iq->Reply(type=>'result');
+    my $iqReplyQuery = $iqReply->NewQuery('http://jabber.org/protocol/disco#items');
+    $con->Send($iqReply);
+} 
+
+
+
 # vcard_get_cb - handles vcard-temp ns
 sub vcard_get_cb { 
 	my ($sid, $iq) = @_;
@@ -473,7 +532,7 @@
 load_config();
 local $lang = $config->{'jabber'}->{'language'};
 
-local $registerForm = new Net::Jabber::X();
+local $registerForm = new Net::Jabber::Stanza('X');
 $registerForm->SetXMLNS('jabber:x:data');
 $registerForm->SetData(	instructions	=>	$config->{'form'}->{$lang}->{'instructions'},
 			title		=>	$config->{'form'}->{$lang}->{'title'},
diff -ruN ile-0.4.old/ile.pl~ ile-0.4/ile.pl~
--- ile-0.4.old/ile.pl~	1970-01-01 01:00:00.000000000 +0100
+++ ile-0.4/ile.pl~	2005-02-10 22:56:23.793651488 +0100
@@ -0,0 +1,600 @@
+#!/usr/bin/perl
+# I Love Email - A notifier of the status of your mailbox for jabber
+# Find it at: http://ile.jabberstudio.org
+# Author:
+# luis peralta / jaxp - peralta @ aditel . org
+# http://spisa.act.uji.es/~peralta
+# JID: al019409@mi.uji.es
+
+
+use Net::Jabber qw(Component);
+use XML::Simple;
+use Net::POP3;
+use Net::IMAP::Simple;
+use DB_File;
+
+# signal handling
+$SIG{HUP} = \&Stop;
+$SIG{KILL} = \&Stop;
+$SIG{TERM} = \&Stop;
+$SIG{INT} = \&Stop;
+$SIG{ALRM} = \&get_mail;
+
+my $config;
+my $con;
+
+# constants
+use constant VERSION => "0.4";
+use constant EXPIRETIME => 1800;
+
+### DB tied
+my %users;
+my %passwords;
+my %hosts;
+my %types;
+my %notifyxa;
+my %notifydnd;
+my %urls;
+
+### Dinamically filled
+my %laststat;
+my %avail;
+
+##### Init
+sub load_config {
+	print " - config\n";
+	$config = XMLin("/etc/jabber/ile.xml");
+}
+
+# jsconnect - Sets up callbacks and connects to the jabber server
+sub js_connect {
+	print " - connecting to [$config->{'jabber'}->{'server'}]\n";
+	$con = new Net::Jabber::Component(	debugfile	=>$config->{'debug'}->{'file'}, 
+						debuglevel	=>$config->{'debug'}->{'level'},
+					 );
+
+	$con->Info(	name	=>	"ILE",
+			version	=>	VERSION);
+
+	$con->SetCallBacks(	onauth	=> 	\&send_probes);
+
+	$con->SetPresenceCallBacks(	
+            available 	=>	\&presence_avail,
+            unavailable	=>	\&presence_unavail,
+	);
+
+	$con->DefineNamespace(	xmlns	=>	'vcard-temp',
+				type	=>	'Query',
+				functions=>	[
+						 {
+						   name	=> 'FN',
+						   Get	=> 'FN',
+						   Set	=> ['scalar', 'FN'],
+						   Defined=> 'FN',
+						   Hash	=> 'child-data',
+						 },
+						 {
+						   name	=> 'DESC',
+						   Get	=> 'DESC',
+						   Set	=> ['scalar', 'DESC'],
+						   Defined=> 'DESC',
+						   Hash	=> 'child-data',
+						 },
+						 {
+						   name	=> 'URL',
+						   Get	=> 'URL',
+						   Set	=> ['scalar', 'URL'],
+						   Defined=> 'URL',
+						   Hash	=> 'child-data',
+						 },
+						 {
+						   name	=> 'JABBERID',
+						   Get	=> 'JABBERID',
+						   Set	=> ['scalar', 'JABBERID'],
+						   Defined=> 'JABBERID',
+						   Hash	=> 'child-data',
+						 },
+						 { name	=> 'Vcard',
+						   Get	=> '__netjabber__:master',
+						   Set	=> ["master"],
+						 },
+						],
+			     );
+
+	$con->SetIQCallBacks(	
+        "vcard-temp"	=>	{
+            get	=> \&vcard_get_cb,
+        },
+        "jabber:iq:register" =>	{
+            get=>\&iqRegisterGetCB,
+            set=>\&iqRegisterSetCB,
+        },
+        "jabber:iq:browse"   =>	{
+            get=>\&iqBrowseGetCB,
+        },
+        "http://jabber.org/protocol/disco#info"     =>  {
+            get => \&iqDiscoInfoGetCB,
+        },
+        "http://jabber.org/protocol/disco#items"    =>  {
+            get => \&iqDiscoItemsGetCB,
+        },
+    );
+
+
+	$con->Execute(	hostname	=>	$config->{'jabber'}->{'server'},
+			port		=>	$config->{'jabber'}->{'port'},
+			secret		=>	$config->{'jabber'}->{'secret'},
+			componentname	=>	$config->{'jabber'}->{'service'},
+		     );
+
+	die "can't connect to jabber server" unless $con->Connected();
+}
+
+
+# db_init - ties the hashes with user info to files
+sub db_init {
+	tie (%users, 'DB_File', $config->{'files'}->{'users'}) 
+		or die ("Cannot tie to " . $config->{'files'}->{'users'} ."!\n");
+	tie (%passwords, 'DB_File', $config->{'files'}->{'passwords'}) 
+		or die ("Cannot tie to " . $config->{'files'}->{'passwords'} ."!\n");
+	tie (%hosts, 'DB_File', $config->{'files'}->{'hosts'}) 
+		or die ("Cannot tie to " . $config->{'files'}->{'hosts'} ."!\n");
+	tie (%types, 'DB_File', $config->{'files'}->{'types'}) 
+		or die ("Cannot tie to " . $config->{'files'}->{'types'} ."!\n");
+	tie (%notifyxa, 'DB_File', $config->{'files'}->{'notifyxa'}) 
+		or die ("Cannot tie to " . $config->{'files'}->{'notifyxa'} ."!\n");
+	tie (%notifydnd, 'DB_File', $config->{'files'}->{'notifydnd'}) 
+		or die ("Cannot tie to " . $config->{'files'}->{'notifydnd'} ."!\n");
+	tie (%urls, 'DB_File', $config->{'files'}->{'urls'}) 
+		or die ("Cannot tie to " . $config->{'files'}->{'urls'} ."!\n");
+}
+
+# Stop - sends unavail presence, disconnects from the server, unties hashes
+sub Stop {
+	print " - Sending unavailable status\n";
+	send_unavail();
+	print "Exiting...\n";
+	print " - Closing Jabber Connection\n";
+	$con->Disconnect();
+	print " - Untieing hashes\n";
+	untie %users;
+	untie %passwords;
+	untie %hosts;
+	untie %types;
+	untie %notifyxa;
+	untie %notifydnd;
+	untie %urls;
+	exit(0);
+}
+
+	
+##### Jabber core
+
+# iqRegisterGetCB - handles iq:register gets.
+sub iqRegisterGetCB {
+	my ($sid, $iq) = @_;
+
+	my %fields;
+
+	my $fromJID = $iq->GetFrom("jid");
+	$fromJID = $fromJID->GetJID("base");
+	
+	# check if the user is already registered
+	if (defined($users{$fromJID})) {
+		$fields{'user'} = $users{$fromJID};
+		$fields{'pass'} = $passwords{$fromJID};
+		$fields{'host'} = $hosts{$fromJID};
+		$fields{'type'} = $types{$fromJID};
+		$fields{'notifyxa'} = $notifyxa{$fromJID};
+		$fields{'notifydnd'} = $notifydnd{$fromJID};
+		$fields{'url'} = $urls{$fromJID};
+	}
+
+	my $iqReply = $iq->Reply(type=>"result");
+	my $iqReplyQuery = $iqReply->NewQuery("jabber:iq:register");
+	$iqReplyQuery->SetRegister(	instructions	=>	$config->{'form'}->{$lang}->{'instructions'},
+					user		=>	$fields{'user'},
+					pass		=>	$fields{'pass'},
+					host		=>	$fields{'host'},
+					type		=>	$fields{'type'},
+				  );
+
+	$iqReplyQuery->SetRegistered() if exists($fields{user});
+
+	$registerUser->RemoveValue();
+	$registerUser->SetValue($fields{'user'});
+	$registerPass->RemoveValue();
+	$registerPass->SetValue($fields{'pass'});
+	$registerHost->RemoveValue();
+	$registerHost->SetValue($fields{'host'});
+	$registerType->RemoveValue();
+	$registerType->SetValue($fields{'type'});
+	$registerNotXA->RemoveValue();
+	$registerNotXA->SetValue($fields{'notifyxa'});
+	$registerNotDND->RemoveValue();
+	$registerNotDND->SetValue($fields{'notifydnd'});
+	$registerUrl->RemoveValue();
+	$registerUrl->SetValue($fields{'url'});
+
+	$iqReplyQuery->AddX($registerForm);
+	$con->Send($iqReply);
+}
+
+# iqRegisterSetCB - handles iq:register sets.
+sub iqRegisterSetCB {
+	my ($sid, $iq) = @_;
+
+	my $fromJID = $iq->GetFrom("jid");
+	$fromJID = $fromJID->GetJID("base");
+	my $query = $iq->GetQuery();
+
+	my $iqReply = $iq->Reply(type=>"result");
+	my $iqReplyQuery = $iqReply->NewQuery("jabber:iq:register");
+
+	# <remove/> ?
+    #if ($query->DefinedRemove()) {
+    if ($query->GetXML() =~ /<remove/io)
+		delete($users{$fromJID});
+		delete($passwords{$fromJID});
+		delete($hosts{$fromJID});
+		delete($types{$fromJID});
+		delete($notifyxa{$fromJID});
+		delete($notifydnd{$fromJID});
+		delete($urls{$fromJID});
+		$con->Send($iqReply);
+		return;
+	}
+
+	my @xData = $query->GetX("jabber:x:data");
+	my %fields;
+	if ($#xData > -1)
+	{
+		$fields{'user'} = "";
+		$fields{'pass'} = "";
+		$fields{'host'} = "";
+		$fields{'type'} = "";
+		$fields{'notifyxa'} = "";
+		$fields{'notifydnd'} = "";
+		$fields{'url'} = "";
+		foreach my $field ($xData[0]->GetFields()) {
+			$fields{$field->GetVar()} = $field->GetValue();
+		}
+	}
+
+	$users{$fromJID} = $fields{'user'};
+	$passwords{$fromJID} = $fields{'pass'};
+	$hosts{$fromJID} = $fields{'host'};
+	$types{$fromJID} = $fields{'type'};
+	$notifyxa{$fromJID} = $fields{'notifyxa'};
+	$notifydnd{$fromJID} = $fields{'notifydnd'};
+	$urls{$fromJID} = $fields{'url'};
+
+	$con->Send($iqReply);
+	$con->PresenceSend(	to	=>	$fromJID,
+				from	=>	$config->{'jabber'}->{'service'},
+				type	=>	"subscribe",
+			  );
+
+}
+
+# iqBrowseGetCB - Handles browse queries to the agent
+sub iqBrowseGetCB {
+	my ($sid, $iq) = @_;
+	my $iqReply = $iq->Reply(type=>"result");
+	my $iqReplyQuery = $iqReply->NewQuery("jabber:iq:browse");
+	
+	$iqReplyQuery->SetBrowse(NS	=>	[ 'jabber:iq:register',
+						  'jabber:iq:time',
+						  'jabber:iq:version',
+						  'jabber:iq:last', ],
+				Jid	=>	$config->{'jabber'}->{'service'},
+				Name	=>	'ILE',
+				Type	=>	'notice',
+				Category=>	'headline',
+			);
+
+	$con->Send($iqReply);
+}
+
+# presence_avail - handles available presences of the users
+sub presence_avail {
+	my ($sid, $presence) = @_;
+
+	my $fromJID = $presence->GetFrom("jid");
+	$fromJID = $fromJID->GetJID("base");
+
+	my $reply;
+
+	if (not defined($users{$fromJID})) {
+		$reply = $presence->Reply(type=>'unsubscribe');
+	} else {
+		$avail{$fromJID} = 1;
+
+		# N::J intelligent presence DB
+		$con->PresenceDBParse($presence);
+		$reply = $presence->Reply(status=>'OK');
+        $reply->RemoveType();
+        $reply->SetFrom($reply->GetFrom().'/ILE') unless $reply->GetFrom() =~ /\//;
+	}
+
+	$con->Send($reply);
+}
+
+# presence_unavail - handles unavailable presences of the users
+sub presence_unavail {
+	my ($sid, $presence) = @_;
+
+	my $fromJID = $presence->GetFrom("jid");
+	$fromJID = $fromJID->GetJID("base");
+
+	# N::J intelligent presence DB
+	my $p = $con->PresenceDBParse($presence);
+
+	if ($p->GetType() eq 'unavailable') {
+		delete($avail{$fromJID});
+		delete($laststat{$fromJID});
+	}
+}
+
+# send_probes - sends presence probes to every user
+sub send_probes {
+	foreach my $jid (keys %users) {
+		$con->PresenceSend(	to	=>	$jid,
+					from	=>	$config->{'jabber'}->{'service'},
+					type	=>	"probe",
+				  );
+
+	}
+}
+
+# send_unavail - sends unavailable presence to every available user
+sub send_unavail {
+	foreach my $jid (keys %avail) {
+		$con->PresenceSend(	to	=>	$jid,
+					from	=>	$config->{'jabber'}->{'service'},
+					type	=>	"unavailable",
+		);
+	}
+}
+
+##### Mail core
+
+# get_sum - gets mail status for a user
+sub get_sum {
+	my $jid = shift;
+
+	print "Checking mail for $jid\n";
+	
+	my $pid = open(JA, "-|");
+	
+	if (not $pid) {
+		# child
+		if ($types{$jid} eq "pop") {
+			my $pop3 = Net::POP3->new($hosts{$jid}, Timeout => $config->{'mail'}->{'timeout'});
+			if (defined($pop3)) {
+				if(defined($pop3->apop($users{$jid}, $passwords{$jid})) 
+					or defined($pop3->login($users{$jid}, $passwords{$jid})) ) {
+					my ($num, $size) = $pop3->popstat;
+					print $num;
+				} else {
+					print "-1";
+				}
+			} else {
+				print "-1";
+			}
+		} else {
+			my $imapc = Net::IMAP::Simple->new($hosts{$jid});
+			if (defined($imapc)) {
+				if( defined($imapc->login($users{$jid}, $passwords{$jid}))) {
+					my $num = $imapc->select('INBOX');
+					print $num;
+				} else {
+					print "-1";
+				}
+			} else {
+				print "-1";
+			}
+		}
+		exit;
+	} else {
+		# parent
+		my $line = <JA>;
+		if ($line == -1) {
+		# some error produced
+			my $msg = new Net::Jabber::Message();
+			my $body = $config->{'form'}->{$lang}->{'errorcheck'};
+			$body =~ s/ACCOUNT/$users{$jid}\@$hosts{$jid} ($types{$jid})/;
+			$msg->SetMessage(type	=>	'normal', 
+					 to	=>	$jid,
+					 from 	=>	$config->{'jabber'}->{'service'},
+					 subject=> 	'ILE',
+					 body	=>	$body,
+					);
+			my $xe = $msg->NewX("jabber:x:expire");
+			$xe->SetSeconds(EXPIRETIME);
+			$con->Send($msg);
+		} else {
+			if (not defined($laststat{$jid})) {
+				$laststat{$jid} = $line;
+			} elsif ($line > $laststat{$jid}) {
+			# changes in the mailbox
+				my $msg = new Net::Jabber::Message();
+				my $num = $line - $laststat{$jid};
+				my $body = $config->{'form'}->{$lang}->{'newmail'};
+				$body =~ s/NUM/$num/;
+				$body =~ s/CHECKINTERVAL/$config->{'mail'}->{'checkinterval'}/;
+				$msg->SetMessage(type	=>	'normal', 
+					 	 to	=>	$jid,
+						 from 	=>	$config->{'jabber'}->{'service'},
+						 subject=> 	'ILE',
+						 body 	=> 	$body,
+						);
+				my $xe = $msg->NewX("jabber:x:expire");
+				$xe->SetSeconds(EXPIRETIME);
+				if (defined($urls{$jid})) {
+					my $xoob = $msg->NewX("jabber:x:oob");
+					my $desc = $config->{'form'}->{$lang}->{'webmail_login'};
+					$desc =~ s/ACCOUNT/$users{$jid}\@$hosts{$jid}/;
+					$xoob->SetDesc($desc);
+					$xoob->SetURL($urls{$jid});
+				}
+				$con->Send($msg);
+				$laststat{$jid} = $line;
+			}
+		}
+		close(JA);
+		{} until wait() == -1;
+	}	
+
+}
+
+# calls get_sum for every available user
+sub get_mail {
+	foreach my $jid (keys %avail) {
+		if (defined($users{$jid})) {
+			my $pres = $con->PresenceDBQuery($jid);
+			my $stat = $pres->GetShow();
+			if (($notifyxa{$jid} == 0 and $stat eq 'xa') or
+				($notifydnd{$jid} == 0 and $stat eq 'dnd')) {
+				next;
+			}
+			get_sum($jid);
+		}
+	}
+	alarm($config->{'mail'}->{'checkinterval'} * 60);
+}
+
+
+##### Helper funcs
+
+sub iqDiscoInfoGetCB
+{
+    my $sid = shift;
+    my $iq = shift;
+
+    my $to = $iq->GetTo();
+    my $from = $iq->GetFrom();
+    my $service = $config->{jabber}->{localname};
+
+    # tworzymy iq z odpowiedzia
+    my $iqReply = $iq->Reply(type=>'result');
+    # tworzymy nowe query o zadanym ns
+    my $iqReplyQuery = $iqReply->NewQuery('http://jabber.org/protocol/disco#info');
+    
+    # chwalimy sie obslugiwanymi "ficzerami"
+    $iqReplyQuery->AddFeature(var=>'http://jabber.org/protocol/disco#info');
+    $iqReplyQuery->AddFeature(var=>'http://jabber.org/protocol/disco#items');
+    $iqReplyQuery->AddFeature(var=>'jabber:iq:time');
+    $iqReplyQuery->AddFeature(var=>'jabber:iq:version');
+    $iqReplyQuery->AddFeature(var=>'jabber:iq:last');
+    $iqReplyQuery->AddFeature(var=>'jabber:iq:browse');
+    $iqReplyQuery->AddFeature(var=>'jabber:iq:register');
+    $iqReplyQuery->AddFeature(var=>'vcard-temp');
+
+    # ustawiamy "tozsamosc" :)
+    $iqReplyQuery->AddIdentity(
+        category    => 'headline',
+        type        => 'notice',
+        name        => 'ILE',
+    );
+
+    $con->Send($iqReply);
+}
+
+sub iqDiscoItemsGetCB
+{
+    my $sid = shift;
+    my $iq = shift;
+
+    my $iqReply = $iq->Reply(type=>'result');
+    my $iqReplyQuery = $iqReply->NewQuery('http://jabber.org/protocol/disco#items');
+    $con->Send($iqReply);
+} 
+
+
+
+# vcard_get_cb - handles vcard-temp ns
+sub vcard_get_cb { 
+	my ($sid, $iq) = @_;
+	my $reply = $iq->Reply(type=>'result');
+	my $replyQuery = $reply->GetQuery();
+	$replyQuery->SetFN($config->{'jabber'}->{'vCard'}->{'FN'});
+	$replyQuery->SetDESC($config->{'jabber'}->{'vCard'}->{'DESC'});
+	$replyQuery->SetURL($config->{'jabber'}->{'vCard'}->{'URL'});
+	$replyQuery->SetJABBERID($config->{'jabber'}->{'service'});
+	$con->Send($reply);
+}	
+
+
+##### Main
+print "Loading...\n";
+
+load_config();
+local $lang = $config->{'jabber'}->{'language'};
+
+local $registerForm = new Net::Jabber::Stanza('X');
+$registerForm->SetXMLNS('jabber:x:data');
+$registerForm->SetData(	instructions	=>	$config->{'form'}->{$lang}->{'instructions'},
+			title		=>	$config->{'form'}->{$lang}->{'title'},
+			type		=> 	"form",
+		      );
+
+$registerForm->AddField(	type	=>	'fixed',
+				value	=>	$config->{'form'}->{$lang}->{'email_options'},
+			);
+
+local $registerUser = $registerForm->AddField(	type	=>	'text-single',
+						var	=>	'user',
+						label	=>	$config->{'form'}->{$lang}->{'user'},
+					  );
+
+local $registerPass = $registerForm->AddField(	type	=>	'text-private',
+						var	=>	'pass',
+						label	=>	$config->{'form'}->{$lang}->{'pass'},
+					  );
+
+local $registerHost = $registerForm->AddField(	type	=>	'text-single',
+						var	=>	'host',
+						label	=>	$config->{'form'}->{$lang}->{'host'},
+					  );
+
+local $registerType = $registerForm->AddField(	type	=>	'list-single',
+						var	=>	'type',
+						label	=>	$config->{'form'}->{$lang}->{'type'},
+						desc	=>	$config->{'form'}->{$lang}->{'type'},
+					  );
+
+$registerType->AddOption(	label	=>	'POP',
+				value	=>	'pop',
+			);
+
+$registerType->AddOption(	label	=>	'IMAP',
+				value	=>	'imap',
+			);
+
+$registerForm->AddField(	type	=>	'fixed',
+				value	=>	$config->{'form'}->{$lang}->{'notify_options'},
+			);
+
+local $registerNotXA = $registerForm->AddField(	type	=>	'boolean',
+						var	=>	'notifyxa',
+						label	=>	$config->{'form'}->{$lang}->{'notifyxa'},
+					      );
+
+local $registerNotDND = $registerForm->AddField(type	=>	'boolean',
+						var	=>	'notifydnd',
+						label	=>	$config->{'form'}->{$lang}->{'notifydnd'},
+					      );
+
+local $registerUrl = $registerForm->AddField(	type	=>	'text-single',
+						var	=>	'url',
+						label	=>	$config->{'form'}->{$lang}->{'webmail_url'},
+					  );
+
+$registerForm->AddField(	type	=>	'fixed',
+				value	=>	$config->{'form'}->{$lang}->{'iledesc'},
+			);
+
+db_init();
+alarm($config->{'mail'}->{'checkinterval'} * 60);
+js_connect();
diff -ruN ile-0.4.old/ile.xml ile-0.4/ile.xml
--- ile-0.4.old/ile.xml	2005-02-10 20:17:05.431743368 +0100
+++ ile-0.4/ile.xml	2005-02-10 22:56:23.794651336 +0100
@@ -1,8 +1,8 @@
 <config>
   <jabber>
      <server>myhost.com</server> <!-- your jabber server -->
-     <port>31515</port> <!-- the port the jabber server is waiting for us -->
-     <secret>hallo</secret> <!-- the shared secret -->
+     <port>5347</port> <!-- the port the jabber server is waiting for us -->
+     <secret>secret</secret> <!-- the shared secret -->
      <service>ile.myhost.com</service> <!-- our name -->
      <connectsleep>5</connectsleep> <!-- seconds to wait if we get disconnected -->
      <language>en</language> <!-- language of the messages -->
@@ -24,13 +24,13 @@
   </mail>
 
   <files> <!-- where to put the data -->
-    <users>users.db</users>
-    <passwords>passwords.db</passwords>
-    <hosts>hosts.db</hosts>
-    <types>types.db</types>
-    <notifyxa>notifyxa.db</notifyxa>
-    <notifydnd>notifydnd.db</notifydnd>
-    <urls>urls.db</urls>
+	  <users>/var/lib/jabber/ile/users.db</users>
+	  <passwords>/var/lib/jabber/ile/passwords.db</passwords>
+	  <hosts>/var/lib/jabber/ile/hosts.db</hosts>
+	  <types>/var/lib/jabber/ile/types.db</types>
+	  <notifyxa>/var/lib/jabber/ile/notifyxa.db</notifyxa>
+	  <notifydnd>/var/lib/jabber/ile/notifydnd.db</notifydnd>
+	  <urls>/var/lib/jabber/ile/urls.db</urls>
   </files>
 
   <form> <!-- messages sent to the user -->
diff -ruN ile-0.4.old/ile.xml~ ile-0.4/ile.xml~
--- ile-0.4.old/ile.xml~	1970-01-01 01:00:00.000000000 +0100
+++ ile-0.4/ile.xml~	2005-02-10 22:56:23.794651336 +0100
@@ -0,0 +1,130 @@
+<config>
+  <jabber>
+     <server>myhost.com</server> <!-- your jabber server -->
+     <port>5347</port> <!-- the port the jabber server is waiting for us -->
+     <secret>secret</secret> <!-- the shared secret -->
+     <service>ile.myhost.com</service> <!-- our name -->
+     <connectsleep>5</connectsleep> <!-- seconds to wait if we get disconnected -->
+     <language>en</language> <!-- language of the messages -->
+     <vCard>
+         <FN>I Love Email</FN>
+         <DESC>An email notifier component</DESC>
+         <URL>http://ile.jabberstudio.org</URL>
+     </vCard>
+  </jabber>
+
+  <debug>
+    <file>ile.log</file>
+    <level>1</level> <!-- man Net::Jabber::Debug -->
+  </debug>
+
+  <mail>
+    <checkinterval>10</checkinterval> <!-- Email check interval, in minutes -->
+    <timeout>20</timeout> <!-- timeout for IMAP/POP connection, in seconds -->
+  </mail>
+
+  <files> <!-- where to put the data -->
+    <users>users.db</users>
+    <passwords>passwords.db</passwords>
+    <hosts>hosts.db</hosts>
+    <types>types.db</types>
+    <notifyxa>notifyxa.db</notifyxa>
+    <notifydnd>notifydnd.db</notifydnd>
+    <urls>urls.db</urls>
+  </files>
+
+  <form> <!-- messages sent to the user -->
+    <en>
+      <instructions>Please fill in the fields,according to your email account settings and notification preferences</instructions>
+      <title>ILE: Email notification service</title>
+      <email_options>Email account settings</email_options>
+      <user>Username</user>
+      <pass>Password</pass>
+      <host>Hostname</host>
+      <type>Type</type>
+      <newmail>You have received NUM email messages since last time I checked, which was CHECKINTERVAL minutes ago.</newmail>
+      <errorcheck>There was an error while trying to check mail for ACCOUNT.</errorcheck>
+      <notify_options>Notification Options</notify_options>
+      <notifyxa>Notify even when Xtended Away (XA)</notifyxa>
+      <notifydnd>Notify even when Do Not Disturb (DND)</notifydnd>
+      <webmail_url>Webmail URL</webmail_url>
+      <webmail_login>Login to ACCOUNT</webmail_login>
+      <iledesc>ILE: an email notifier component: http://ile.jabberstudio.org</iledesc>
+    </en>
+
+    <es>
+      <instructions>Por favor, rellene los campos del formulario.</instructions>
+      <title>ILE: Servicio de notificación de correo</title>
+      <email_options>Configuración de la cuenta de correo</email_options>
+      <user>Usuario</user>
+      <pass>Clave</pass>
+      <host>Host</host>
+      <type>Tipo</type>
+      <newmail>Ha recibido NUM email(s) desde la última comprobación que fue hace CHECKINTERVAL minutos</newmail>
+      <errorcheck>Ha habido un error en la comprobación del correo para la cuenta ACCOUNT.</errorcheck>
+      <notify_options>Opciones de notificación</notify_options>
+      <notifyxa>Notificar incluso si muy ausente (XA)</notifyxa>
+      <notifydnd>Notificar incluso si no molestar (DND)</notifydnd>
+      <webmail_url>Webmail URL</webmail_url>
+      <webmail_login>Leer correo de ACCOUNT</webmail_login>
+      <iledesc>ILE: un notificador de nuevo email - http://ile.jabberstudio.org</iledesc>
+    </es>
+
+    <ca>
+      <instructions>Ompli els camps del formulari.</instructions>
+      <title>ILE: Servei de notificació de nou email</title>
+      <email_options>Dades del compte de mail</email_options>
+      <user>Usuari</user>
+      <pass>Clau</pass>
+      <host>Host</host>
+      <type>Tipus</type>
+      <newmail>Ha rebut NUM email(s) des de la última comprobació que va ser fa CHECKINTERVAL minuts.</newmail>
+      <errorcheck>S'ha produit un error en la comprobació del correu per al compte ACCOUNT.</errorcheck>
+      <notify_options>Opcions de notificació</notify_options>
+      <notifyxa>Notificar si molt absent (XA)</notifyxa>
+      <notifydnd>Notificar si no molestar (DND)</notifydnd>
+      <webmail_url>Webmail URL</webmail_url>
+      <webmail_login>Llegir correu de ACCOUNT</webmail_login>
+      <iledesc>ILE: un notificador de nou email - http://ile.jabberstudio.org</iledesc>
+    </ca>
+
+    <ro>
+      <!-- Contributed by Adrian Rappa -->
+      <instructions>Va rog completati urmatoarele campuri</instructions>
+      <title>I Love Email: new email notification service</title>
+      <email_options>Email account settings</email_options>
+      <user>Nume utilizator</user>
+      <pass>Parola</pass>
+      <host>Nume gazda</host>
+      <type>Tip</type>
+      <newmail>Ati primit NUM mesaj(e) de la ultima verificare, care a fost acum CHECKINTERVAL minute.</newmail>
+      <errorcheck>A fost eroare in timp ce incercam sa verific posta pentru ACCOUNT.</errorcheck>
+      <notify_options>Notification Options</notify_options>
+      <notifyxa>Notify even when Xtended Away (XA)</notifyxa>
+      <notifydnd>Notify even when Do Not Disturb (DND)</notifydnd>
+      <webmail_url>Webmail URL</webmail_url>
+      <webmail_login>Login to ACCOUNT</webmail_login>
+      <iledesc>ILE: an email notifier component: http://ile.jabberstudio.org</iledesc>
+    </ro>
+
+    <nl>
+      <!-- Contributed by Sander Devrieze -->
+      <instructions>Vul a.u.b. volgende velden in overeenkomstig met uw e-mail  account instellingen en notificatie voorkeuren.</instructions>
+      <title>ILE: dienst voor E-mail notificatie</title>
+      <email_options>E-mail account instellingen</email_options>
+      <user>Gebruikersnaam</user>
+      <pass>Wachtwoord</pass>
+      <host>Naam mailserver</host>
+      <type>Soort</type>
+      <newmail>U hebt NUM e-mails ontvangen sinds CHECKINTERVAL minuten geleden.</newmail>
+      <errorcheck>Fout tijdens controle op nieuwe e-mails op                    ACCOUNT.</errorcheck>
+      <notify_options>Notificatie Instellingen</notify_options>
+      <notifyxa>Notificeer ook in Niet Beschikbaar status (XA)</notifyxa>             <notifydnd>Notificeer ook in Niet Storen status (DND)</notifydnd>
+      <webmail_url>Webmail URL</webmail_url>
+      <webmail_login>Log in op ACCOUNT</webmail_login>
+      <iledesc>ILE: een e-mail notificatie onderdeel: http://ile.jabberstudio.org</iledesc>
+    </nl>
+
+  </form>
+
+</config>
